{"ast":null,"code":"var _jsxFileName = \"/Users/frankzhu/Downloads/frontend_beta/src/components/Charts.js\";\nimport React from \"react\";\nimport Chartist from \"react-chartist\";\nimport ChartistTooltip from 'chartist-plugin-tooltips-updated';\nimport { ethers } from \"ethers\";\nimport 'dotenv/config'; // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import\n\nasync function getWMPrice() {\n  // get the price history of a token using ethers.js\n  const provider = new ethers.providers.JsonRpcProvider(\"https://eth-rinkeby.alchemyapi.io/v2/B7joNLrdqTc7ULI4CpjW8WIhosHA4tHV\"); //const signer = new ethers.Wallet(process.env.RINKEBY_DEPLOYER_PRIVATE_KEY, provider);\n  // You can also use an ENS name for the contract address\n\n  const wmAddress = \"0x861248D24A331cA30374F5a57b6c3E29cE962cc7\"; // The ERC-20 Contract ABI, which is a common contract interface\n  // for tokens (this is the Human-Readable ABI format)\n\n  const wmAbi = [// Some details about the token\n  \"function wm_price() view returns (uint256)\", \"function totalSupply() view returns (uint256)\", // Get the account balance\n  \"function wms_price(address) view returns (uint256)\", // Send some of your tokens to someone else\n  \"function price_target(uint256)\", // An event triggered whenever anyone transfers to someone else\n  \"event global_collateral_ratio(uint256)\"]; // The Contract object\n\n  const wmContract = new ethers.Contract(wmAddress, wmAbi, provider);\n  const wm_price_now = await wmContract.totalSupply();\n}\n\nexport const SalesValueChart = () => {\n  const data = {\n    labels: [getWMPrice(), 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    series: [[getWMPrice(), 2, 2, 3, 3, 4, 3]]\n  };\n  const options = {\n    low: 0,\n    showArea: true,\n    fullWidth: true,\n    axisX: {\n      position: 'end',\n      showGrid: true\n    },\n    axisY: {\n      // On the y-axis start means left and end means right\n      showGrid: false,\n      showLabel: false,\n      labelInterpolationFnc: value => `$${value / 1}k`\n    }\n  };\n  const plugins = [ChartistTooltip()];\n  return /*#__PURE__*/React.createElement(Chartist, {\n    data: data,\n    options: { ...options,\n      plugins\n    },\n    type: \"Line\",\n    className: \"ct-series-g ct-double-octave\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  });\n};\nexport const SalesValueChartphone = () => {\n  const data = {\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    series: [[1, 2, 2, 3, 3, 4, 3]]\n  };\n  const options = {\n    low: 0,\n    showArea: true,\n    fullWidth: false,\n    axisX: {\n      position: 'end',\n      showGrid: true\n    },\n    axisY: {\n      // On the y-axis start means left and end means right\n      showGrid: false,\n      showLabel: false,\n      labelInterpolationFnc: value => `$${value / 1}k`\n    }\n  };\n  const plugins = [ChartistTooltip()];\n  return /*#__PURE__*/React.createElement(Chartist, {\n    data: data,\n    options: { ...options,\n      plugins\n    },\n    type: \"Line\",\n    className: \"ct-series-g ct-major-tenth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  });\n};\nexport const CircleChart = props => {\n  const {\n    series = [],\n    donutWidth = 20\n  } = props;\n\n  const sum = (a, b) => a + b;\n\n  const options = {\n    low: 0,\n    high: 8,\n    donutWidth,\n    donut: true,\n    donutSolid: true,\n    fullWidth: false,\n    showLabel: false,\n    labelInterpolationFnc: value => `${Math.round(value / series.reduce(sum) * 100)}%`\n  };\n  const plugins = [ChartistTooltip()];\n  return /*#__PURE__*/React.createElement(Chartist, {\n    data: {\n      series\n    },\n    options: { ...options,\n      plugins\n    },\n    type: \"Pie\",\n    className: \"ct-golden-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  });\n};\nexport const BarChart = props => {\n  const {\n    labels = [],\n    series = [],\n    chartClassName = \"ct-golden-section\"\n  } = props;\n  const data = {\n    labels,\n    series\n  };\n  const options = {\n    low: 0,\n    showArea: true,\n    axisX: {\n      position: 'end'\n    },\n    axisY: {\n      showGrid: false,\n      showLabel: false,\n      offset: 0\n    }\n  };\n  const plugins = [ChartistTooltip()];\n  return /*#__PURE__*/React.createElement(Chartist, {\n    data: data,\n    options: { ...options,\n      plugins\n    },\n    type: \"Bar\",\n    className: chartClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/frankzhu/Downloads/frontend_beta/src/components/Charts.js"],"names":["React","Chartist","ChartistTooltip","ethers","getWMPrice","provider","providers","JsonRpcProvider","wmAddress","wmAbi","wmContract","Contract","wm_price_now","totalSupply","SalesValueChart","data","labels","series","options","low","showArea","fullWidth","axisX","position","showGrid","axisY","showLabel","labelInterpolationFnc","value","plugins","SalesValueChartphone","CircleChart","props","donutWidth","sum","a","b","high","donut","donutSolid","Math","round","reduce","BarChart","chartClassName","offset"],"mappings":"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","sourcesContent":["\nimport React from \"react\";\nimport Chartist from \"react-chartist\";\nimport ChartistTooltip from 'chartist-plugin-tooltips-updated';\nimport { ethers } from \"ethers\";\nimport 'dotenv/config'; // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import\n\n\nasync function getWMPrice() {   \n  // get the price history of a token using ethers.js\n  const provider = new ethers.providers.JsonRpcProvider(\"https://eth-rinkeby.alchemyapi.io/v2/B7joNLrdqTc7ULI4CpjW8WIhosHA4tHV\");\n  //const signer = new ethers.Wallet(process.env.RINKEBY_DEPLOYER_PRIVATE_KEY, provider);\n  // You can also use an ENS name for the contract address\n  const wmAddress = \"0x861248D24A331cA30374F5a57b6c3E29cE962cc7\";\n\n  // The ERC-20 Contract ABI, which is a common contract interface\n  // for tokens (this is the Human-Readable ABI format)\n  const wmAbi = [\n  // Some details about the token\n  \"function wm_price() view returns (uint256)\",\n  \"function totalSupply() view returns (uint256)\",\n\n  // Get the account balance\n  \"function wms_price(address) view returns (uint256)\",\n\n  // Send some of your tokens to someone else\n  \"function price_target(uint256)\",\n\n  // An event triggered whenever anyone transfers to someone else\n  \"event global_collateral_ratio(uint256)\"\n  ];\n\n  // The Contract object\n  const wmContract = new ethers.Contract(wmAddress, wmAbi, provider);\n  const wm_price_now =  await wmContract.totalSupply();\n}\n\n\n\nexport const SalesValueChart = () => {\n  \n  const data = {\n    labels: [ getWMPrice(), 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    series: [[ getWMPrice(), 2, 2, 3, 3, 4, 3]]\n  };\n\n  const options = {\n    low: 0,\n    showArea: true,\n    fullWidth: true,\n    axisX: {\n      position: 'end',\n      showGrid: true\n    },\n    axisY: {\n      // On the y-axis start means left and end means right\n      showGrid: false,\n      showLabel: false,\n      labelInterpolationFnc: value => `$${value / 1}k`\n    }\n  };\n\n  const plugins = [\n    ChartistTooltip()\n  ]\n\n  return (\n    <Chartist data={data} options={{...options, plugins}} type=\"Line\" className=\"ct-series-g ct-double-octave\" />\n  );\n};\n\nexport const SalesValueChartphone = () => {\n  const data = {\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    series: [[1, 2, 2, 3, 3, 4, 3]]\n  };\n\n  const options = {\n    low: 0,\n    showArea: true,\n    fullWidth: false,\n    axisX: {\n      position: 'end',\n      showGrid: true\n    },\n    axisY: {\n      // On the y-axis start means left and end means right\n      showGrid: false,\n      showLabel: false,\n      labelInterpolationFnc: value => `$${value / 1}k`\n    }\n  };\n\n  const plugins = [\n    ChartistTooltip()\n  ]\n\n  return (\n    <Chartist data={data} options={{...options, plugins}} type=\"Line\" className=\"ct-series-g ct-major-tenth\" />\n  );\n};\n\nexport const CircleChart = (props) => {\n  const { series = [], donutWidth = 20 } = props;\n  const sum = (a, b) => a + b;\n\n  const options = {\n    low: 0,\n    high: 8,\n    donutWidth,\n    donut: true,\n    donutSolid: true,\n    fullWidth: false,\n    showLabel: false,\n    labelInterpolationFnc: value => `${Math.round(value / series.reduce(sum) * 100)}%`,\n  }\n\n  const plugins = [\n    ChartistTooltip()\n  ]\n\n  return (\n    <Chartist data={{ series }} options={{...options, plugins}} type=\"Pie\" className=\"ct-golden-section\" />\n  );\n};\n\nexport const BarChart = (props) => {\n  const { labels = [], series = [], chartClassName = \"ct-golden-section\" } = props;\n  const data = { labels, series };\n\n  const options = {\n    low: 0,\n    showArea: true,\n    axisX: {\n      position: 'end'\n    },\n    axisY: {\n      showGrid: false,\n      showLabel: false,\n      offset: 0\n    }\n  };\n\n  const plugins = [\n    ChartistTooltip()\n  ]\n\n  return (\n    <Chartist data={data} options={{...options, plugins}} type=\"Bar\" className={chartClassName} />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}